name: Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-configurations:
    name: Test Configurations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [default, opentelemetry, prometheus]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Build
      run: cargo build --release

    - name: Test with default config
      if: matrix.config == 'default'
      run: |
        ./target/release/gensonnet init --example
        ./target/release/gensonnet validate
        ./target/release/gensonnet info

    - name: Test with OpenTelemetry Operator config
      if: matrix.config == 'opentelemetry'
      run: |
        cp examples/crds/opentelemetry-operator.yaml .gensonnet.yaml
        ./target/release/gensonnet validate
        ./target/release/gensonnet info

    - name: Test with Prometheus config
      if: matrix.config == 'prometheus'
      run: |
        # Create a test config for Prometheus
        cat > .gensonnet.yaml << 'EOF'
        version: "1.0"
        sources:
          - type: "crd"
            name: "prometheus-test"
            git:
              url: "https://github.com/prometheus-operator/kube-prometheus.git"
              ref: "v0.13.0"
            filters:
              - "monitoring.coreos.com/*"
            output_path: "./generated/prometheus"
        output:
          base_path: "./generated"
          organization: "api_version"
        generation:
          fail_fast: false
          deep_merge_strategy: "default"
        EOF
        ./target/release/gensonnet validate

  test-features:
    name: Test Features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: [default, http]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Test with features
      run: |
        cargo test --features ${{ matrix.features }}
        cargo build --release --features ${{ matrix.features }}

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Run integration tests
      run: |
        cargo test --test integration_test -- --nocapture

    - name: Test CLI commands
      run: |
        cargo build --release
        ./target/release/gensonnet --help
        ./target/release/gensonnet init --help
        ./target/release/gensonnet generate --help
        ./target/release/gensonnet validate --help
        ./target/release/gensonnet lock --help
        ./target/release/gensonnet info --help

  test-error-handling:
    name: Error Handling Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Build
      run: cargo build --release

    - name: Test invalid configurations
      run: |
        # Test with non-existent config file
        ./target/release/gensonnet --config nonexistent.yaml validate || true
        
        # Test with invalid YAML
        echo "invalid: yaml: content" > invalid.yaml
        ./target/release/gensonnet --config invalid.yaml validate || true
        
        # Test with empty config
        echo "" > empty.yaml
        ./target/release/gensonnet --config empty.yaml validate || true

    - name: Test lockfile operations
      run: |
        # Test lockfile status when no lockfile exists
        ./target/release/gensonnet lock --status || true
